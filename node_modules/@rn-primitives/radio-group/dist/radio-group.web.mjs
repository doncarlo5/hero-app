'use client'

// src/radio-group.web.tsx
import * as RadioGroup from "@radix-ui/react-radio-group";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var RadioGroupContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, value, onValueChange, disabled = false, ...viewProps }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <RadioGroupContext.Provider
      value={{
        value,
        disabled,
        onValueChange
      }}
    >
        <RadioGroup.Root value={value} onValueChange={onValueChange} disabled={disabled} asChild>
          <Component ref={ref} {...viewProps} />
        </RadioGroup.Root>
      </RadioGroupContext.Provider>;
  }
);
Root2.displayName = "RootRadioGroup";
function useRadioGroupContext() {
  const context = React.useContext(RadioGroupContext);
  if (!context) {
    throw new Error(
      "RadioGroup compound components cannot be rendered outside the RadioGroup component"
    );
  }
  return context;
}
var Item2 = React.forwardRef(
  ({ asChild, value, onPress: onPressProps, ...props }, ref) => {
    const { onValueChange } = useRadioGroupContext();
    function onPress(ev) {
      if (onPressProps) {
        onPressProps(ev);
      }
      onValueChange(value);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <RadioGroup.Item value={value} asChild>
        <Component ref={ref} onPress={onPress} {...props} />
      </RadioGroup.Item>;
  }
);
Item2.displayName = "ItemRadioGroup";
var Indicator2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <RadioGroup.Indicator asChild>
        <Component ref={ref} {...props} />
      </RadioGroup.Indicator>;
  }
);
Indicator2.displayName = "IndicatorRadioGroup";
export {
  Indicator2 as Indicator,
  Item2 as Item,
  Root2 as Root
};
