'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/radio-group.tsx
var radio_group_exports = {};
__export(radio_group_exports, {
  Indicator: () => Indicator,
  Item: () => Item,
  Root: () => Root
});
module.exports = __toCommonJS(radio_group_exports);
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var Slot = __toESM(require("@rn-primitives/slot"));
var RadioGroupContext = React.createContext(null);
var Root = React.forwardRef(
  ({ asChild, value, onValueChange, disabled = false, ...viewProps }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <RadioGroupContext.Provider
      value={{
        value,
        disabled,
        onValueChange
      }}
    >
        <Component ref={ref} role='radiogroup' {...viewProps} />
      </RadioGroupContext.Provider>;
  }
);
Root.displayName = "RootRadioGroup";
function useRadioGroupContext() {
  const context = React.useContext(RadioGroupContext);
  if (!context) {
    throw new Error(
      "RadioGroup compound components cannot be rendered outside the RadioGroup component"
    );
  }
  return context;
}
var RadioItemContext = React.createContext(null);
var Item = React.forwardRef(
  ({ asChild, value: itemValue, disabled: disabledProp = false, onPress: onPressProp, ...props }, ref) => {
    const { disabled, value, onValueChange } = useRadioGroupContext();
    function onPress(ev) {
      if (disabled || disabledProp) return;
      onValueChange(itemValue);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <RadioItemContext.Provider
      value={{
        itemValue
      }}
    >
        <Component
      ref={ref}
      role='radio'
      onPress={onPress}
      aria-checked={value === itemValue}
      disabled={(disabled || disabledProp) ?? false}
      accessibilityState={{
        disabled: (disabled || disabledProp) ?? false,
        checked: value === itemValue
      }}
      {...props}
    />
      </RadioItemContext.Provider>;
  }
);
Item.displayName = "ItemRadioGroup";
function useRadioItemContext() {
  const context = React.useContext(RadioItemContext);
  if (!context) {
    throw new Error(
      "RadioItem compound components cannot be rendered outside the RadioItem component"
    );
  }
  return context;
}
var Indicator = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { value } = useRadioGroupContext();
    const { itemValue } = useRadioItemContext();
    if (!forceMount) {
      if (value !== itemValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Component ref={ref} role='presentation' {...props} />;
  }
);
Indicator.displayName = "IndicatorRadioGroup";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Indicator,
  Item,
  Root
});
