import {
  require_react
} from "./chunk-CW6NJX7S.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// ../../node_modules/react-use-wake-lock/dist/react-use-wake-lock.js
var import_react = __toESM(require_react());
function q() {
  const [a, u] = (0, import_react.useState)(
    document.visibilityState === "visible"
  ), o = (0, import_react.useCallback)(() => {
    u(document.visibilityState === "visible");
  }, []);
  return (0, import_react.useEffect)(() => (document.addEventListener("visibilitychange", o), () => {
    document.removeEventListener("visibilitychange", o);
  }), [o]), a;
}
function l(a) {
  console.warn(`[react-use-wake-lock]: ${a}`);
}
function V(a) {
  const u = q(), [o, L] = (0, import_react.useState)(false), f = (0, import_react.useRef)(false), d = (0, import_react.useRef)(false), [r, g] = (0, import_react.useState)(null), n = "wakeLock" in navigator, s = (0, import_react.useRef)(a), i = (0, import_react.useCallback)((e, t) => {
    var h;
    ((h = s.current) == null ? void 0 : h.onError) != null && s.current.onError(e, t);
  }, []), v = (0, import_react.useCallback)((e) => {
    var t;
    ((t = s.current) == null ? void 0 : t.onLock) != null && s.current.onLock(e);
  }, []), w = (0, import_react.useCallback)((e) => {
    var t;
    ((t = s.current) == null ? void 0 : t.onRelease) != null && s.current.onRelease(e);
  }, []), k = (0, import_react.useCallback)(async () => {
    if (!n) {
      l("WakeLock is not supported by the browser");
      return;
    }
    if (f.current === true) {
      l("WakeLock request is in progress. noop");
      return;
    }
    if (r != null && r.released === false) {
      l("Already have a lock. noop");
      return;
    }
    d.current = false;
    try {
      f.current = true;
      const e = await navigator.wakeLock.request("screen");
      e.addEventListener("release", () => {
        L(false), w(e);
      }), g(e), L(true), v(e);
    } catch (e) {
      e instanceof Error ? i(e, "request") : i(new Error("Unknown error type on request"), "request");
    } finally {
      f.current = false;
    }
  }, [n, r, v, w, i]), p = (0, import_react.useCallback)(async () => {
    if (!n) {
      l("WakeLock is not supported by the browser");
      return;
    }
    if (r == null) {
      l("Trying to release lock without having one: noop");
      return;
    }
    try {
      d.current = true, await r.release();
    } catch (e) {
      e instanceof Error ? i(e, "release") : i(new Error("Unknown error type on release"), "release");
    }
  }, [n, r, i]);
  return (0, import_react.useEffect)(() => {
    n && r != null && u && r.released && d.current !== true && k();
  }, [n, u, r, k]), (0, import_react.useMemo)(
    () => ({
      isSupported: n,
      isLocked: o,
      request: k,
      release: p
    }),
    [o, n, p, k]
  );
}
export {
  V as default
};
//# sourceMappingURL=react-use-wake-lock.js.map
